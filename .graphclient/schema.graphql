schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type BaseFeePerGasDayCandle {
  id: String!
  timestamp: BigInt!
  open: BigInt
  high: BigInt
  low: BigInt
  close: BigInt
}

input BaseFeePerGasDayCandle_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  open: BigInt
  open_not: BigInt
  open_gt: BigInt
  open_lt: BigInt
  open_gte: BigInt
  open_lte: BigInt
  open_in: [BigInt!]
  open_not_in: [BigInt!]
  high: BigInt
  high_not: BigInt
  high_gt: BigInt
  high_lt: BigInt
  high_gte: BigInt
  high_lte: BigInt
  high_in: [BigInt!]
  high_not_in: [BigInt!]
  low: BigInt
  low_not: BigInt
  low_gt: BigInt
  low_lt: BigInt
  low_gte: BigInt
  low_lte: BigInt
  low_in: [BigInt!]
  low_not_in: [BigInt!]
  close: BigInt
  close_not: BigInt
  close_gt: BigInt
  close_lt: BigInt
  close_gte: BigInt
  close_lte: BigInt
  close_in: [BigInt!]
  close_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [BaseFeePerGasDayCandle_filter]
  or: [BaseFeePerGasDayCandle_filter]
}

enum BaseFeePerGasDayCandle_orderBy {
  id
  timestamp
  open
  high
  low
  close
}

type BaseFeePerGasHourCandle {
  id: String!
  timestamp: BigInt!
  open: BigInt
  high: BigInt
  low: BigInt
  close: BigInt
}

input BaseFeePerGasHourCandle_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  open: BigInt
  open_not: BigInt
  open_gt: BigInt
  open_lt: BigInt
  open_gte: BigInt
  open_lte: BigInt
  open_in: [BigInt!]
  open_not_in: [BigInt!]
  high: BigInt
  high_not: BigInt
  high_gt: BigInt
  high_lt: BigInt
  high_gte: BigInt
  high_lte: BigInt
  high_in: [BigInt!]
  high_not_in: [BigInt!]
  low: BigInt
  low_not: BigInt
  low_gt: BigInt
  low_lt: BigInt
  low_gte: BigInt
  low_lte: BigInt
  low_in: [BigInt!]
  low_not_in: [BigInt!]
  close: BigInt
  close_not: BigInt
  close_gt: BigInt
  close_lt: BigInt
  close_gte: BigInt
  close_lte: BigInt
  close_in: [BigInt!]
  close_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [BaseFeePerGasHourCandle_filter]
  or: [BaseFeePerGasHourCandle_filter]
}

enum BaseFeePerGasHourCandle_orderBy {
  id
  timestamp
  open
  high
  low
  close
}

type BaseFeePerGasMinuteCandle {
  id: String!
  timestamp: BigInt!
  """ The highest value of base fee per gas within the minute """
  open: BigInt
  high: BigInt
  low: BigInt
  close: BigInt
}

input BaseFeePerGasMinuteCandle_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  open: BigInt
  open_not: BigInt
  open_gt: BigInt
  open_lt: BigInt
  open_gte: BigInt
  open_lte: BigInt
  open_in: [BigInt!]
  open_not_in: [BigInt!]
  high: BigInt
  high_not: BigInt
  high_gt: BigInt
  high_lt: BigInt
  high_gte: BigInt
  high_lte: BigInt
  high_in: [BigInt!]
  high_not_in: [BigInt!]
  low: BigInt
  low_not: BigInt
  low_gt: BigInt
  low_lt: BigInt
  low_gte: BigInt
  low_lte: BigInt
  low_in: [BigInt!]
  low_not_in: [BigInt!]
  close: BigInt
  close_not: BigInt
  close_gt: BigInt
  close_lt: BigInt
  close_gte: BigInt
  close_lte: BigInt
  close_in: [BigInt!]
  close_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [BaseFeePerGasMinuteCandle_filter]
  or: [BaseFeePerGasMinuteCandle_filter]
}

enum BaseFeePerGasMinuteCandle_orderBy {
  id
  timestamp
  open
  high
  low
  close
}

type BaseFeePerGasWeekCandle {
  id: String!
  timestamp: BigInt!
  open: BigInt
  high: BigInt
  low: BigInt
  close: BigInt
}

input BaseFeePerGasWeekCandle_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  open: BigInt
  open_not: BigInt
  open_gt: BigInt
  open_lt: BigInt
  open_gte: BigInt
  open_lte: BigInt
  open_in: [BigInt!]
  open_not_in: [BigInt!]
  high: BigInt
  high_not: BigInt
  high_gt: BigInt
  high_lt: BigInt
  high_gte: BigInt
  high_lte: BigInt
  high_in: [BigInt!]
  high_not_in: [BigInt!]
  low: BigInt
  low_not: BigInt
  low_gt: BigInt
  low_lt: BigInt
  low_gte: BigInt
  low_lte: BigInt
  low_in: [BigInt!]
  low_not_in: [BigInt!]
  close: BigInt
  close_not: BigInt
  close_gt: BigInt
  close_lt: BigInt
  close_gte: BigInt
  close_lte: BigInt
  close_in: [BigInt!]
  close_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [BaseFeePerGasWeekCandle_filter]
  or: [BaseFeePerGasWeekCandle_filter]
}

enum BaseFeePerGasWeekCandle_orderBy {
  id
  timestamp
  open
  high
  low
  close
}

scalar BigDecimal

scalar BigInt

type Block {
  id: Bytes!
  number: BigInt!
  timestamp: BigInt!
  gasUsed: BigInt!
  baseFeePerGas: BigInt!
  txns(skip: Int = 0, first: Int = 100, orderBy: Txn_orderBy, orderDirection: OrderDirection, where: Txn_filter): [Txn!]!
  txnCount: Int!
  minGasPrice: BigInt!
  maxGasPrice: BigInt!
  firstGasPrice: BigInt!
  lastGasPrice: BigInt!
  gasFees: BigInt!
  burnedFees: BigInt!
  minerTips: BigInt!
}

input BlockChangedFilter {
  number_gte: Int!
}

input Block_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  number: BigInt
  number_not: BigInt
  number_gt: BigInt
  number_lt: BigInt
  number_gte: BigInt
  number_lte: BigInt
  number_in: [BigInt!]
  number_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasUsed: BigInt
  gasUsed_not: BigInt
  gasUsed_gt: BigInt
  gasUsed_lt: BigInt
  gasUsed_gte: BigInt
  gasUsed_lte: BigInt
  gasUsed_in: [BigInt!]
  gasUsed_not_in: [BigInt!]
  baseFeePerGas: BigInt
  baseFeePerGas_not: BigInt
  baseFeePerGas_gt: BigInt
  baseFeePerGas_lt: BigInt
  baseFeePerGas_gte: BigInt
  baseFeePerGas_lte: BigInt
  baseFeePerGas_in: [BigInt!]
  baseFeePerGas_not_in: [BigInt!]
  txns_: Txn_filter
  txnCount: Int
  txnCount_not: Int
  txnCount_gt: Int
  txnCount_lt: Int
  txnCount_gte: Int
  txnCount_lte: Int
  txnCount_in: [Int!]
  txnCount_not_in: [Int!]
  minGasPrice: BigInt
  minGasPrice_not: BigInt
  minGasPrice_gt: BigInt
  minGasPrice_lt: BigInt
  minGasPrice_gte: BigInt
  minGasPrice_lte: BigInt
  minGasPrice_in: [BigInt!]
  minGasPrice_not_in: [BigInt!]
  maxGasPrice: BigInt
  maxGasPrice_not: BigInt
  maxGasPrice_gt: BigInt
  maxGasPrice_lt: BigInt
  maxGasPrice_gte: BigInt
  maxGasPrice_lte: BigInt
  maxGasPrice_in: [BigInt!]
  maxGasPrice_not_in: [BigInt!]
  firstGasPrice: BigInt
  firstGasPrice_not: BigInt
  firstGasPrice_gt: BigInt
  firstGasPrice_lt: BigInt
  firstGasPrice_gte: BigInt
  firstGasPrice_lte: BigInt
  firstGasPrice_in: [BigInt!]
  firstGasPrice_not_in: [BigInt!]
  lastGasPrice: BigInt
  lastGasPrice_not: BigInt
  lastGasPrice_gt: BigInt
  lastGasPrice_lt: BigInt
  lastGasPrice_gte: BigInt
  lastGasPrice_lte: BigInt
  lastGasPrice_in: [BigInt!]
  lastGasPrice_not_in: [BigInt!]
  gasFees: BigInt
  gasFees_not: BigInt
  gasFees_gt: BigInt
  gasFees_lt: BigInt
  gasFees_gte: BigInt
  gasFees_lte: BigInt
  gasFees_in: [BigInt!]
  gasFees_not_in: [BigInt!]
  burnedFees: BigInt
  burnedFees_not: BigInt
  burnedFees_gt: BigInt
  burnedFees_lt: BigInt
  burnedFees_gte: BigInt
  burnedFees_lte: BigInt
  burnedFees_in: [BigInt!]
  burnedFees_not_in: [BigInt!]
  minerTips: BigInt
  minerTips_not: BigInt
  minerTips_gt: BigInt
  minerTips_lt: BigInt
  minerTips_gte: BigInt
  minerTips_lte: BigInt
  minerTips_in: [BigInt!]
  minerTips_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Block_filter]
  or: [Block_filter]
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

enum Block_orderBy {
  id
  number
  timestamp
  gasUsed
  baseFeePerGas
  txns
  txnCount
  minGasPrice
  maxGasPrice
  firstGasPrice
  lastGasPrice
  gasFees
  burnedFees
  minerTips
}

scalar Bytes

"""
8 bytes signed integer

"""
scalar Int8

type MinGasPriceDayCandle {
  id: String!
  timestamp: BigInt!
  open: BigInt
  high: BigInt
  low: BigInt
  close: BigInt
}

input MinGasPriceDayCandle_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  open: BigInt
  open_not: BigInt
  open_gt: BigInt
  open_lt: BigInt
  open_gte: BigInt
  open_lte: BigInt
  open_in: [BigInt!]
  open_not_in: [BigInt!]
  high: BigInt
  high_not: BigInt
  high_gt: BigInt
  high_lt: BigInt
  high_gte: BigInt
  high_lte: BigInt
  high_in: [BigInt!]
  high_not_in: [BigInt!]
  low: BigInt
  low_not: BigInt
  low_gt: BigInt
  low_lt: BigInt
  low_gte: BigInt
  low_lte: BigInt
  low_in: [BigInt!]
  low_not_in: [BigInt!]
  close: BigInt
  close_not: BigInt
  close_gt: BigInt
  close_lt: BigInt
  close_gte: BigInt
  close_lte: BigInt
  close_in: [BigInt!]
  close_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [MinGasPriceDayCandle_filter]
  or: [MinGasPriceDayCandle_filter]
}

enum MinGasPriceDayCandle_orderBy {
  id
  timestamp
  open
  high
  low
  close
}

type MinGasPriceHourCandle {
  id: String!
  timestamp: BigInt!
  open: BigInt
  high: BigInt
  low: BigInt
  close: BigInt
}

input MinGasPriceHourCandle_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  open: BigInt
  open_not: BigInt
  open_gt: BigInt
  open_lt: BigInt
  open_gte: BigInt
  open_lte: BigInt
  open_in: [BigInt!]
  open_not_in: [BigInt!]
  high: BigInt
  high_not: BigInt
  high_gt: BigInt
  high_lt: BigInt
  high_gte: BigInt
  high_lte: BigInt
  high_in: [BigInt!]
  high_not_in: [BigInt!]
  low: BigInt
  low_not: BigInt
  low_gt: BigInt
  low_lt: BigInt
  low_gte: BigInt
  low_lte: BigInt
  low_in: [BigInt!]
  low_not_in: [BigInt!]
  close: BigInt
  close_not: BigInt
  close_gt: BigInt
  close_lt: BigInt
  close_gte: BigInt
  close_lte: BigInt
  close_in: [BigInt!]
  close_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [MinGasPriceHourCandle_filter]
  or: [MinGasPriceHourCandle_filter]
}

enum MinGasPriceHourCandle_orderBy {
  id
  timestamp
  open
  high
  low
  close
}

type MinGasPriceMinuteCandle {
  id: String!
  timestamp: BigInt!
  open: BigInt
  high: BigInt
  low: BigInt
  close: BigInt
}

input MinGasPriceMinuteCandle_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  open: BigInt
  open_not: BigInt
  open_gt: BigInt
  open_lt: BigInt
  open_gte: BigInt
  open_lte: BigInt
  open_in: [BigInt!]
  open_not_in: [BigInt!]
  high: BigInt
  high_not: BigInt
  high_gt: BigInt
  high_lt: BigInt
  high_gte: BigInt
  high_lte: BigInt
  high_in: [BigInt!]
  high_not_in: [BigInt!]
  low: BigInt
  low_not: BigInt
  low_gt: BigInt
  low_lt: BigInt
  low_gte: BigInt
  low_lte: BigInt
  low_in: [BigInt!]
  low_not_in: [BigInt!]
  close: BigInt
  close_not: BigInt
  close_gt: BigInt
  close_lt: BigInt
  close_gte: BigInt
  close_lte: BigInt
  close_in: [BigInt!]
  close_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [MinGasPriceMinuteCandle_filter]
  or: [MinGasPriceMinuteCandle_filter]
}

enum MinGasPriceMinuteCandle_orderBy {
  id
  timestamp
  open
  high
  low
  close
}

type MinGasPriceWeekCandle {
  id: String!
  timestamp: BigInt!
  open: BigInt
  high: BigInt
  low: BigInt
  close: BigInt
}

input MinGasPriceWeekCandle_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  open: BigInt
  open_not: BigInt
  open_gt: BigInt
  open_lt: BigInt
  open_gte: BigInt
  open_lte: BigInt
  open_in: [BigInt!]
  open_not_in: [BigInt!]
  high: BigInt
  high_not: BigInt
  high_gt: BigInt
  high_lt: BigInt
  high_gte: BigInt
  high_lte: BigInt
  high_in: [BigInt!]
  high_not_in: [BigInt!]
  low: BigInt
  low_not: BigInt
  low_gt: BigInt
  low_lt: BigInt
  low_gte: BigInt
  low_lte: BigInt
  low_in: [BigInt!]
  low_not_in: [BigInt!]
  close: BigInt
  close_not: BigInt
  close_gt: BigInt
  close_lt: BigInt
  close_gte: BigInt
  close_lte: BigInt
  close_in: [BigInt!]
  close_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [MinGasPriceWeekCandle_filter]
  or: [MinGasPriceWeekCandle_filter]
}

enum MinGasPriceWeekCandle_orderBy {
  id
  timestamp
  open
  high
  low
  close
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Query {
  block(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Block
  blocks(
    skip: Int = 0
    first: Int = 100
    orderBy: Block_orderBy
    orderDirection: OrderDirection
    where: Block_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Block!]!
  txn(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Txn
  txns(
    skip: Int = 0
    first: Int = 100
    orderBy: Txn_orderBy
    orderDirection: OrderDirection
    where: Txn_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Txn!]!
  baseFeePerGasMinuteCandle(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BaseFeePerGasMinuteCandle
  baseFeePerGasMinuteCandles(
    skip: Int = 0
    first: Int = 100
    orderBy: BaseFeePerGasMinuteCandle_orderBy
    orderDirection: OrderDirection
    where: BaseFeePerGasMinuteCandle_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BaseFeePerGasMinuteCandle!]!
  baseFeePerGasHourCandle(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BaseFeePerGasHourCandle
  baseFeePerGasHourCandles(
    skip: Int = 0
    first: Int = 100
    orderBy: BaseFeePerGasHourCandle_orderBy
    orderDirection: OrderDirection
    where: BaseFeePerGasHourCandle_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BaseFeePerGasHourCandle!]!
  baseFeePerGasDayCandle(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BaseFeePerGasDayCandle
  baseFeePerGasDayCandles(
    skip: Int = 0
    first: Int = 100
    orderBy: BaseFeePerGasDayCandle_orderBy
    orderDirection: OrderDirection
    where: BaseFeePerGasDayCandle_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BaseFeePerGasDayCandle!]!
  baseFeePerGasWeekCandle(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BaseFeePerGasWeekCandle
  baseFeePerGasWeekCandles(
    skip: Int = 0
    first: Int = 100
    orderBy: BaseFeePerGasWeekCandle_orderBy
    orderDirection: OrderDirection
    where: BaseFeePerGasWeekCandle_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BaseFeePerGasWeekCandle!]!
  minGasPriceMinuteCandle(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MinGasPriceMinuteCandle
  minGasPriceMinuteCandles(
    skip: Int = 0
    first: Int = 100
    orderBy: MinGasPriceMinuteCandle_orderBy
    orderDirection: OrderDirection
    where: MinGasPriceMinuteCandle_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MinGasPriceMinuteCandle!]!
  minGasPriceHourCandle(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MinGasPriceHourCandle
  minGasPriceHourCandles(
    skip: Int = 0
    first: Int = 100
    orderBy: MinGasPriceHourCandle_orderBy
    orderDirection: OrderDirection
    where: MinGasPriceHourCandle_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MinGasPriceHourCandle!]!
  minGasPriceDayCandle(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MinGasPriceDayCandle
  minGasPriceDayCandles(
    skip: Int = 0
    first: Int = 100
    orderBy: MinGasPriceDayCandle_orderBy
    orderDirection: OrderDirection
    where: MinGasPriceDayCandle_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MinGasPriceDayCandle!]!
  minGasPriceWeekCandle(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MinGasPriceWeekCandle
  minGasPriceWeekCandles(
    skip: Int = 0
    first: Int = 100
    orderBy: MinGasPriceWeekCandle_orderBy
    orderDirection: OrderDirection
    where: MinGasPriceWeekCandle_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MinGasPriceWeekCandle!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Subscription {
  block(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Block
  blocks(
    skip: Int = 0
    first: Int = 100
    orderBy: Block_orderBy
    orderDirection: OrderDirection
    where: Block_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Block!]!
  txn(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Txn
  txns(
    skip: Int = 0
    first: Int = 100
    orderBy: Txn_orderBy
    orderDirection: OrderDirection
    where: Txn_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Txn!]!
  baseFeePerGasMinuteCandle(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BaseFeePerGasMinuteCandle
  baseFeePerGasMinuteCandles(
    skip: Int = 0
    first: Int = 100
    orderBy: BaseFeePerGasMinuteCandle_orderBy
    orderDirection: OrderDirection
    where: BaseFeePerGasMinuteCandle_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BaseFeePerGasMinuteCandle!]!
  baseFeePerGasHourCandle(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BaseFeePerGasHourCandle
  baseFeePerGasHourCandles(
    skip: Int = 0
    first: Int = 100
    orderBy: BaseFeePerGasHourCandle_orderBy
    orderDirection: OrderDirection
    where: BaseFeePerGasHourCandle_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BaseFeePerGasHourCandle!]!
  baseFeePerGasDayCandle(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BaseFeePerGasDayCandle
  baseFeePerGasDayCandles(
    skip: Int = 0
    first: Int = 100
    orderBy: BaseFeePerGasDayCandle_orderBy
    orderDirection: OrderDirection
    where: BaseFeePerGasDayCandle_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BaseFeePerGasDayCandle!]!
  baseFeePerGasWeekCandle(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BaseFeePerGasWeekCandle
  baseFeePerGasWeekCandles(
    skip: Int = 0
    first: Int = 100
    orderBy: BaseFeePerGasWeekCandle_orderBy
    orderDirection: OrderDirection
    where: BaseFeePerGasWeekCandle_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BaseFeePerGasWeekCandle!]!
  minGasPriceMinuteCandle(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MinGasPriceMinuteCandle
  minGasPriceMinuteCandles(
    skip: Int = 0
    first: Int = 100
    orderBy: MinGasPriceMinuteCandle_orderBy
    orderDirection: OrderDirection
    where: MinGasPriceMinuteCandle_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MinGasPriceMinuteCandle!]!
  minGasPriceHourCandle(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MinGasPriceHourCandle
  minGasPriceHourCandles(
    skip: Int = 0
    first: Int = 100
    orderBy: MinGasPriceHourCandle_orderBy
    orderDirection: OrderDirection
    where: MinGasPriceHourCandle_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MinGasPriceHourCandle!]!
  minGasPriceDayCandle(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MinGasPriceDayCandle
  minGasPriceDayCandles(
    skip: Int = 0
    first: Int = 100
    orderBy: MinGasPriceDayCandle_orderBy
    orderDirection: OrderDirection
    where: MinGasPriceDayCandle_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MinGasPriceDayCandle!]!
  minGasPriceWeekCandle(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MinGasPriceWeekCandle
  minGasPriceWeekCandles(
    skip: Int = 0
    first: Int = 100
    orderBy: MinGasPriceWeekCandle_orderBy
    orderDirection: OrderDirection
    where: MinGasPriceWeekCandle_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MinGasPriceWeekCandle!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Txn {
  id: Bytes!
  blockNumber: BigInt!
  block: Block!
  index: Int!
  timestamp: BigInt!
  gasUsed: BigInt!
  gasPrice: BigInt!
  gasFee: BigInt!
  txnType: Int!
  maxPriorityFeePerGas: BigInt!
  burnedFee: BigInt!
  minerTip: BigInt!
}

input Txn_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  block: String
  block_not: String
  block_gt: String
  block_lt: String
  block_gte: String
  block_lte: String
  block_in: [String!]
  block_not_in: [String!]
  block_contains: String
  block_contains_nocase: String
  block_not_contains: String
  block_not_contains_nocase: String
  block_starts_with: String
  block_starts_with_nocase: String
  block_not_starts_with: String
  block_not_starts_with_nocase: String
  block_ends_with: String
  block_ends_with_nocase: String
  block_not_ends_with: String
  block_not_ends_with_nocase: String
  block_: Block_filter
  index: Int
  index_not: Int
  index_gt: Int
  index_lt: Int
  index_gte: Int
  index_lte: Int
  index_in: [Int!]
  index_not_in: [Int!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasUsed: BigInt
  gasUsed_not: BigInt
  gasUsed_gt: BigInt
  gasUsed_lt: BigInt
  gasUsed_gte: BigInt
  gasUsed_lte: BigInt
  gasUsed_in: [BigInt!]
  gasUsed_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasFee: BigInt
  gasFee_not: BigInt
  gasFee_gt: BigInt
  gasFee_lt: BigInt
  gasFee_gte: BigInt
  gasFee_lte: BigInt
  gasFee_in: [BigInt!]
  gasFee_not_in: [BigInt!]
  txnType: Int
  txnType_not: Int
  txnType_gt: Int
  txnType_lt: Int
  txnType_gte: Int
  txnType_lte: Int
  txnType_in: [Int!]
  txnType_not_in: [Int!]
  maxPriorityFeePerGas: BigInt
  maxPriorityFeePerGas_not: BigInt
  maxPriorityFeePerGas_gt: BigInt
  maxPriorityFeePerGas_lt: BigInt
  maxPriorityFeePerGas_gte: BigInt
  maxPriorityFeePerGas_lte: BigInt
  maxPriorityFeePerGas_in: [BigInt!]
  maxPriorityFeePerGas_not_in: [BigInt!]
  burnedFee: BigInt
  burnedFee_not: BigInt
  burnedFee_gt: BigInt
  burnedFee_lt: BigInt
  burnedFee_gte: BigInt
  burnedFee_lte: BigInt
  burnedFee_in: [BigInt!]
  burnedFee_not_in: [BigInt!]
  minerTip: BigInt
  minerTip_not: BigInt
  minerTip_gt: BigInt
  minerTip_lt: BigInt
  minerTip_gte: BigInt
  minerTip_lte: BigInt
  minerTip_in: [BigInt!]
  minerTip_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Txn_filter]
  or: [Txn_filter]
}

enum Txn_orderBy {
  id
  blockNumber
  block
  block__id
  block__number
  block__timestamp
  block__gasUsed
  block__baseFeePerGas
  block__txnCount
  block__minGasPrice
  block__maxGasPrice
  block__firstGasPrice
  block__lastGasPrice
  block__gasFees
  block__burnedFees
  block__minerTips
  index
  timestamp
  gasUsed
  gasPrice
  gasFee
  txnType
  maxPriorityFeePerGas
  burnedFee
  minerTip
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}